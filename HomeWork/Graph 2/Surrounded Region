class Solution {
public:
    void dfs(vector<vector<char>> &board, vector<vector<int>> &visited, int row, int col, int n, int m){
        visited[row][col]=1;
        int delrow[]={0,-1,0,1};
        int delcol[]={1,0,-1,0};
        for(int i=0;i<4;i++){
            int nrow=row+delrow[i];
            int ncol=col+delcol[i];
            if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && !visited[nrow][ncol] && board[nrow][ncol]=='O')
                dfs(board,visited, nrow, ncol, n,m);
        }
    }
    void solve(vector<vector<char>>& board) 
    {
        int n=board.size();
        int m=board[0].size();
        vector<vector<int>> visited(n,vector<int>(m,0));
        for(int i=0;i<n;i++){
            if(board[i][0]=='O' && !visited[i][0])
                dfs(board,visited,i,0, n,m);
            if(board[i][m-1]=='O' && !visited[i][m-1])
                dfs(board,visited,i,m-1,n,m);
        }
        for(int i=0;i<m;i++){
            if(board[0][i]=='O' && !visited[0][i])
                dfs(board,visited,0,i,n,m);
            if(board[n-1][i]=='O' && !visited[n-1][i])
                dfs(board,visited,n-1,i,n,m);
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(board[i][j]=='O' && visited[i][j]==1)
                    board[i][j]='O';
                else
                    board[i][j]='X';
            }
        }
    }
};
