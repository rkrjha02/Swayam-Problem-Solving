class TrieNode{
    public:
    TrieNode *children[2];
    TrieNode(){
        for(int i=0;i<2;i++)
            children[i]=nullptr;
    }
};
class trie{
    private: TrieNode *root;
    public:
     trie(){
         root=new TrieNode();
     }
    
    void insert(int num){
        TrieNode *node=root;
        for(int i=31;i>=0;i--){
            int bit=(num>>i)&1;
            if(node->children[bit]==nullptr)
                node->children[bit]=new TrieNode();
            node=node->children[bit];
        }
    }
    int maxOr(int num){
        TrieNode *node=root;
        int currMax=0;
        for(int i=31;i>=0;i--){
            int bit=(num>>i)&1;
            int index=abs(1-bit);
            if(node->children[index]!=nullptr){
               currMax|=(1<<i);
               node=node->children[index];
            }
            else{
               node=node->children[bit]; 
            }
        }
        return currMax;
    }
};
class Solution {
public:
    int findMaximumXOR(vector<int>& nums)
    {
        trie *root=new trie();
        for(int i=0;i<nums.size();i++)
            root->insert(nums[i]);
        int maximumXor=INT_MIN;
        for(int i=0;i<nums.size();i++){
            maximumXor=max(maximumXor, root->maxOr(nums[i]));
        }
        return maximumXor;
    }
};
