class Solution {
public:
    // MEMOISATION(TOP DOWN APPROACH)
    // int replace(string &word1, string &word2, int i, int j, vector<vector<int>> &dp)
    // {
    //    if(i<0) return j+1;
    //    if(j<0) return i+1;
    //    if(dp[i][j]!=-1)
    //     return dp[i][j];
    //    if(word1[i]==word2[j])
    //     return dp[i][j]=0+replace(word1,word2,i-1,j-1,dp);
    //    int insert=1+replace(word1,word2,i,j-1,dp);
    //    int rep=1+replace(word1,word2,i-1,j-1,dp);
    //    int delet=1+replace(word1,word2,i-1,j,dp);
    //    return dp[i][j]=min(min(insert,rep),delet); 
    // }
    
    // TABULATION(BOTTOM UP APPROACH)
    // int minDistance(string word1, string word2) 
    // {
    //    int n=word1.length();
    //    int m=word2.length();
    //    vector<vector<int>> dp(n+1,vector<int>(m+1,0));
    //    for(int j=0;j<=m;j++) dp[0][j]=j;
    //    for(int i=0;i<=n;i++) dp[i][0]=i;
    //    for(int i=1;i<=n;i++)
    //    {
    //        for(int j=1;j<=m;j++)
    //        {
    //            if(word1[i-1]==word2[j-1])
    //             dp[i][j]=0+dp[i-1][j-1];
    //            else
    //            { 
    //            int insert=1+dp[i][j-1];
    //            int rep=1+dp[i-1][j-1];
    //            int delet=1+dp[i-1][j];
    //            dp[i][j]=min(min(insert,rep),delet);
    //            } 
    //        }
    //    }
    //    return dp[n][m]; 
    // }
    
    //SPACE OPTIMISATION
    int minDistance(string word1, string word2) 
    {
       int n=word1.length();
       int m=word2.length();
       vector<int> prev(m+1,0), curr(m+1,0);
       for(int j=0;j<=m;j++) prev[j]=j;
       for(int i=1;i<=n;i++)
       {
           curr[0]=i;
           for(int j=1;j<=m;j++)
           {
               if(word1[i-1]==word2[j-1])
                curr[j]=0+prev[j-1];
               else
               { 
               int insert=1+curr[j-1];
               int rep=1+prev[j-1];
               int delet=1+prev[j];
               curr[j]=min(min(insert,rep),delet);
               } 
           }
           prev=curr;
       }
       return prev[m]; 
    }
};
