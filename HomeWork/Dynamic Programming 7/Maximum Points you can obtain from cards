class Solution {
public:
    
    // MEMOISATION(MLE)
    // int maxScore(vector<int> &cardPoints, int low, int high, int k, vector<vector<vector<int>>> &dp){
    //     if(k==0)
    //         return 0;
    //     if(dp[low][high][k]!=-1)
    //         return dp[low][high][k];
    //     int front=cardPoints[low]+maxScore(cardPoints, low+1, high, k-1, dp);
    //     int back=cardPoints[high]+maxScore(cardPoints, low, high-1, k-1, dp);
    //     return dp[low][high][k]=max(front,back);
    // }
    
    int maxScore(vector<int>& cardPoints, int k) {
        int n=cardPoints.size();
        int sum=0;
        for(int i=0;i<k;i++)
            sum+=cardPoints[i];
        if(k==n)
            return sum;
        int end=n-1, currMax=sum;
        for(int i=k-1;i>=0;i--){
            sum-=cardPoints[i];
            sum+=cardPoints[end];
            end--;
            currMax=max(sum,currMax);
        }
        return currMax;
    }
};
