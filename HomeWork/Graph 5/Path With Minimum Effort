class Solution {
public:
    int minimumEffortPath(vector<vector<int>>& heights) {
        int n=heights.size();
        int m=heights[0].size();
        vector<vector<int>> distance(n,vector<int>(m,INT_MAX));
priority_queue<pair<int,pair<int,int>>,vector<pair<int,pair<int,int>>>,greater<pair<int,pair<int,int>>>> pq;
        pq.push({0,{0,0}});
        distance[0][0]=0;
        int delrow[]={0,-1,0,1};
        int delcol[]={1,0,-1,0};
        while(!pq.empty()){
            int dist=pq.top().first;
            int row=pq.top().second.first;
            int col=pq.top().second.second;
            pq.pop();
            if(row==n-1 && col==m-1)
                return dist;
            for(int i=0;i<4;i++){
                int newRow=row+delrow[i];
                int newCol=col+delcol[i];
                if(newRow>=0 && newRow<n && newCol>=0 && newCol<m){
                   int eff=max(abs(heights[newRow][newCol]-heights[row][col]),dist);
                   if(distance[newRow][newCol]>eff){
                       distance[newRow][newCol]=eff;
                       pq.push({eff,{newRow,newCol}});
                   }
                }
            }
        }
        return 0;
    }
};
