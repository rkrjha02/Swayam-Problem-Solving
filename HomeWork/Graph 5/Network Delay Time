class Solution {
public:
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        vector<pair<int,int>> adj[n+1];
        for(int i=0;i<times.size();i++){
            adj[times[i][0]].push_back({times[i][1],times[i][2]});
        }
        queue<pair<int,pair<int,int>>> q;
        q.push({0,{k,0}});
        int finalTime=0;
        vector<int> distance(n+1,INT_MAX);
        distance[k]=0;
        while(!q.empty()){
            int time=q.front().first;
            int node=q.front().second.first;
            int weight=q.front().second.second;
            q.pop();
            for(auto it:adj[node]){
                int adjNode=it.first;
                int adjWeight=it.second;
                int newTime=time+adjWeight;
                if(distance[adjNode]>newTime){
                    distance[adjNode]=newTime;
                    q.push({newTime,{adjNode,adjWeight}});
                }
            }
        }
        for(int i=1;i<distance.size();i++){
            if(distance[i]==INT_MAX)
                return -1;
            else if(distance[i]>finalTime)
                finalTime=distance[i];
        }
        return finalTime;
    }
};
