class Solution {
public:
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {
        vector<pair<int,int>> adj[n];
        for(int i=0;i<flights.size();i++){
            adj[flights[i][0]].push_back({flights[i][2],flights[i][1]});
        }
        vector<int> distance(n,INT_MAX);
        queue<pair<int,pair<int,int>>> pq;
        pq.push({0,{src,0}});
        distance[src]=0;
        while(!pq.empty()){
            int stop=pq.front().first;
            int node=pq.front().second.first;
            int dist=pq.front().second.second;
            pq.pop();
            if(stop>k)
                continue;
            for(auto it:adj[node]){
                int adjNode=it.second;
                int edgeWt=it.first;
                if((dist+edgeWt)<distance[adjNode]){
                    distance[adjNode]=dist+edgeWt;
                    pq.push({stop+1, {adjNode,distance[adjNode]}});
                }
            }
        }
        if(distance[dst]!=INT_MAX)
             return distance[dst];
        return -1;
    }
};
