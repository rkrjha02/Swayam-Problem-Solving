class Solution {
public:
    vector<int> minimumTime(int n, vector<vector<int>>& edges, vector<int>& disappear) {
        vector<pair<int,int>> adj[n];
        for(int i=0;i<edges.size();i++){
            adj[edges[i][0]].push_back({edges[i][1],edges[i][2]});
            adj[edges[i][1]].push_back({edges[i][0],edges[i][2]});
        }
        vector<int> minTime(n,INT_MAX);
        priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> pq;
        pq.push({0,0});
        minTime[0]=0;
        while(!pq.empty()){
            int node=pq.top().second;
            int weight=pq.top().first;
            pq.pop();
            if(weight>minTime[node]) continue;
            for(auto it:adj[node]){
                int adjNode=it.first;
                int edgeWeight=it.second;
                int newTime=weight+edgeWeight;
                if(disappear[adjNode]>newTime && minTime[adjNode]>newTime){
                    minTime[adjNode]=newTime;
                    pq.push({newTime,adjNode});
                }
            }
        }
        for(int i=0;i<n;i++){
            if(minTime[i]==INT_MAX)
                minTime[i]=-1;
        }
        return minTime;
    }
};
