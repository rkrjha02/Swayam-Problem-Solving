class Solution {
public:
    void dfs(int ele, vector<int> adj[], vector<int> &visited)
    {
        visited[ele]=1;
        for(auto it:adj[ele])
        {
            if(!visited[it])
             dfs(it,adj,visited);
        }
    }
    int findCircleNum(vector<vector<int>>& isConnected) 
    {
       int n=isConnected.size();
       vector<int> adj[n];
       int number_of_provinces=0;
       for(int i=0;i<n;i++)
       {
           for(int j=0;j<n;j++)
           {
               if(isConnected[i][j] && i!=j)
               {
                   adj[i].push_back(j);
                   adj[j].push_back(i);
               }
           }
       } 
       vector<int> visited(n,0);
       for(int i=0;i<n;i++)
       {
           if(!visited[i])
           {
               number_of_provinces++;
               dfs(i,adj,visited);
           }
       }
       return number_of_provinces;
    }
};
