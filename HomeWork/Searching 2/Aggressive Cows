class Solution {
public:
    bool canPlace(int dist, int n, int NumberCows, vector<int> &stalls)
    {
        int last=stalls[0];
        int countCow=1;
        for(int i=1;i<n;i++)
        {
            if(stalls[i]-last>=dist)
            {
                last=stalls[i];
                countCow++;
            }
        }
        if(countCow>=NumberCows)
         return true;
        return false; 
    }
    int solve(int n, int k, vector<int> &stalls) 
    {
      sort(stalls.begin(),stalls.end());
      int ans=-1;
      int low=1, high=stalls[n-1]-stalls[0];
      while(low<=high)
      {
          int mid=low+(high-low)/2;
          if(canPlace(mid,n,k,stalls))
          {
              ans=mid;
              low=mid+1;
          }
          else
           high=mid-1;
      }
      return ans;
    }
};
