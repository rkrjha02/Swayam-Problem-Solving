class Solution {
public:
    // MEMOISATION(TOP DOWN APPROACH)
    // int totalWays(vector<int> &coins, int amount, int index, vector<vector<int>> &dp){
    //     if(amount==0)
    //          return 1;
    //     if(index<0)
    //         return 0;
    //     if(dp[index][amount]!=-1)
    //          return dp[index][amount];
    //     int notake=totalWays(coins, amount, index-1, dp);
    //     int take=0;
    //     if(amount>=coins[index])
    //         take+=totalWays(coins, amount-coins[index], index, dp);
    //     return dp[index][amount]=take+notake;
    // }
    
    //TABULATION(BOTTOM UP APPRAOCH)
    // int change(int amount, vector<int>& coins) {
    //     int n=coins.size();
    //     vector<vector<int>> dp(n,vector<int>(amount+1,0));
    //     for(int i=0;i<n;i++)
    //         dp[i][0]=1;
    //     for(int i=1;i<=amount;i++){
    //         if(i%coins[0]==0)
    //             dp[0][i]=1;
    //     }
    //     for(int index=1;index<n;index++){
    //         for(int paisa=1;paisa<=amount;paisa++){
    //              int notake=dp[index-1][paisa];
    //              int take=0;
    //              if(paisa>=coins[index])
    //                take+=dp[index][paisa-coins[index]];
    //              dp[index][paisa]=take+notake;
    //         }
    //     }
    //     return dp[n-1][amount];
    // }
    
    //SPACE OPTIMISATION
    int change(int amount, vector<int>& coins) {
        int n=coins.size();
        vector<int> prev(amount+1,0);
        vector<int> curr(amount+1,0);
        prev[0]=1;
        for(int i=1;i<=amount;i++){
            if(i%coins[0]==0)
                prev[i]=1;
        }
        for(int index=1;index<n;index++){
            for(int paisa=0;paisa<=amount;paisa++){
                 int notake=prev[paisa];
                 int take=0;
                 if(paisa>=coins[index])
                   take+=curr[paisa-coins[index]];
                 curr[paisa]=take+notake;
            }
            prev=curr;
        }
        return prev[amount];
    }
};
