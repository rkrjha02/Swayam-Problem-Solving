class Solution {
public:
    
    // MEMOISATION(TOP DOWN APPROACH)
    // int maxlis(vector<int> &nums, int n, int index, int prevIdx, vector<vector<int>> &dp)     {
    //     if(index==n)
    //         return 0;
    //     if(dp[index][prevIdx+1]!=-1)
    //         return dp[index][prevIdx+1];
    //     int notake=0+maxlis(nums,n,index+1,prevIdx,dp);
    //     int take=0;
    //     if(prevIdx==-1 || nums[index]>nums[prevIdx])
    //        take=1+maxlis(nums,n,index+1,index,dp);
    //     return dp[index][prevIdx+1]=max(take,notake);
    // }
    
    // TABULATION(BOTTOM UP APPROACH)
    // int lengthOfLIS(vector<int>& nums) {
    //     int n=nums.size();
    //     vector<vector<int>> dp(n+1,vector<int>(n+1,0));
    //     for(int index=n-1;index>=0;index--){
    //         for(int prevIdx=index-1;prevIdx>=-1;prevIdx--){
    //              int notake=0+dp[index+1][prevIdx+1];
    //              int take=0;
    //              if(prevIdx==-1 || nums[index]>nums[prevIdx])
    //                take=1+dp[index+1][index+1];
    //              dp[index][prevIdx+1]=max(take,notake);
    //         }
    //     }
    //     return dp[0][0];
    // }
    
    //SPACE OPTIMISATION
    // int lengthOfLIS(vector<int>& nums) {
    //     int n=nums.size();
    //     //vector<vector<int>> dp(n+1,vector<int>(n+1,0));
    //     vector<int> curr(n+1,0);
    //     vector<int> nextCurr(n+1,0);
    //     for(int index=n-1;index>=0;index--){
    //         for(int prevIdx=index-1;prevIdx>=-1;prevIdx--){
    //              int notake=0+nextCurr[prevIdx+1];
    //              int take=0;
    //              if(prevIdx==-1 || nums[index]>nums[prevIdx])
    //                take=1+nextCurr[index+1];
    //              curr[prevIdx+1]=max(take,notake);
    //         }
    //         nextCurr=curr;
    //     }
    //     return nextCurr[0];
    // }
    
    // USING BINARY SEARCH
    int greaterEqual(vector<int> &result, int key){
        int low=0, high=result.size()-1;
        while(low<=high){
            int mid=low+(high-low)/2;
            if(key<=result[mid])
                high=mid-1;
            else
                low=mid+1;
        }
        return low;
    }
    
    int lengthOfLIS(vector<int>& nums) {
        int n=nums.size();
        vector<int> result;
        result.push_back(nums[0]);
        for(int i=1;i<n;i++){
            if(nums[i]>result[result.size()-1])
                result.push_back(nums[i]);
            else{
                int index=greaterEqual(result,nums[i]);
                result[index]=nums[i];
            }
        }
        return result.size();
    }
};
