#include<bits/stdc++.h>
using namespace std;
#define int long long
class Trie{
   public:
 Trie* children[2];
 int count;
Trie(){
    for(int i=0;i<2;i++)
       children[i] = NULL;
    count = 0;    
   }
};
void insert(int num,Trie* node){
   for(int i=18;i>=0;i--){
    int bit = (num>>i)&1;
   if(node->children[bit] == NULL)
      node->children[bit] = new Trie();
    node = node->children[bit];
    node->count++;   
  }
}

int sub_xor_less_than_k(int num,int k,Trie* node){
   int count = 0;
for(int i=18;i>=0;i--){
    int bit_num = (num>>i)&1;
     int bit_k = (k>>i)&1;
     if(bit_k == 1){
      if(node->children[bit_num] != NULL)
        count += node->children[bit_num]->count;
      node = node->children[1-bit_num];  
     }
     else if(bit_k == 0){
        node = node->children[bit_num];
     }
     if(node == NULL)break;
   }
   return count;
}
void solve() {
    int n,k; 
    cin >> n >> k;
    int b[n];
    for(int i=0;i<n;i++)cin >> b[i];
    int sub_xor[n+1]; sub_xor[0] = 0;
    for(int i=1;i<(n+1);i++){
        sub_xor[i] = sub_xor[i-1] ^ b[i-1]; 
    }
    Trie* root = new Trie();
    int ans = 0;    
    insert(sub_xor[0],root);    
    for(int i=1;i<(n+1);i++){
        ans += sub_xor_less_than_k(sub_xor[i],k,root);
        insert(sub_xor[i],root);
    }
    cout << ans;
    cout << endl;
}
signed main(){    
    int tc;
    cin >> tc;
    while(tc--)
      solve();
}
