class Trie{
public:
   vector<int> indices;
   Trie* children[2];
   Trie(){
      for(int i=0;i<2;i++)
         children[i] = nullptr;
   }
};

class Solution {
public:
   void insert(int num,Trie* node,int in){
      for(int i=30;i>=0;i--){
         int bit = (num>>i)&1;
         if(node->children[bit] == NULL)
            node->children[bit] = new Trie();
         node = node->children[bit]; 
      }
      node->indices.push_back(in+1);
   }

   int cnt(int num,Trie* node,int in){        
      for(int i=30;i>=0;i--){
         int bit = (num>>i)&1;
         if(node->children[bit] == NULL)
            return 0;
         node = node->children[bit];  
      }
      int count = 0;
      for(auto i:node->indices)
         count += in-i;
      return count;
   }    

   int countTriplets(vector<int>& b) {      
      int n = b.size();
      vector<int> preXor(n+1,0); 
      for(int i=1;i<(n+1);i++)
         preXor[i] = preXor[i-1]^b[i-1];
      Trie* root = new Trie();
      insert(preXor[0],root,0);
      int ans = 0;      
      for(int i=1;i<(n+1);i++){
         ans += cnt(preXor[i],root,i); 
         insert(preXor[i],root,i); 
      }
      return ans;
   }
};
