int upperBound(vector<int> &vect, int num)
{
    int low=0;
    int high=vect.size()-1;
    int ans=-1;
    while(low<=high)
    {
        int mid=low+(high-low)/2;
        if(vect[mid]>num)
        {
           ans=mid;
           high=mid-1; 
        }
        else 
         low=mid+1;
    }
    if(ans==-1)
     return vect.size();
    return ans; 
}
int checkSmallEqual(vector<vector<int>> &matrix, int num)
{
    int row=matrix.size();
    int sum=0;
    for(int i=0;i<row;i++)
    {
        sum+=upperBound(matrix[i],num);
    }
    return sum;
}
int Solution::findMedian(vector<vector<int> > &A) 
{
   int low=INT_MAX;
   int row=A.size();
   int col=A[0].size();
   for(int i=0;i<row;i++)
   {
       if(low>A[i][0])
        low=A[i][0]; 
   }
   int high=INT_MIN;
   for(int i=0;i<row;i++)
   {
       if(high<A[i][col-1])
        high=A[i][col-1];
   } 
   while(low<=high)
   {
       int mid=low+(high-low)/2;
       if(checkSmallEqual(A,mid)>(row*col)/2)
        high=mid-1;
       else
         low=mid+1;
   }
   return low;
}
