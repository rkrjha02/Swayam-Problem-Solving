class Solution {
public:
    // MEMOISATION(TOP DOWN APPROACH)
    // int path(int m, int n, int row, int col, vector<vector<int>> &dp)
    // {
    //     if(row>=m || col>=n)
    //      return 0;
    //     if(row==m-1 && col==n-1)
    //      return 1;
    //      if(dp[row][col]!=-1)
    //       return dp[row][col];
    //     int right=path(m,n,row, col+1,dp);
    //     int down=path(m,n, row+1, col,dp);
    //     return dp[row][col]=right+down;  
    // }
    
    //TABULATION(BOTTOM UP APPROACH)
    // int uniquePaths(int m, int n) 
    // {
    //    vector<vector<int>> dp(m,vector<int>(n,0));
    //    dp[0][0]=1;
    //    for(int i=0;i<m;i++)
    //    {
    //        for(int j=0;j<n;j++)
    //        {
    //           if(i==0 && j==0)
    //            continue;
    //           int right=0,down=0;
    //           if(j>0)
    //            right=dp[i][j-1];
    //           if(i>0) 
    //            down=dp[i-1][j];
    //           dp[i][j]=right+down; 
    //        }
    //    }
    //    return dp[m-1][n-1];
    // }
    
    // SPACE OPTIMISATION
    int uniquePaths(int m, int n) 
    {
       vector<int> prev(n,0);
       vector<int> curr(n,0);
       curr[0]=1;
       prev[0]=1;
       for(int i=0;i<m;i++)
       {
           for(int j=0;j<n;j++)
           {
              if(i==0 && j==0)
               continue;
              int right=0,down=0;
              if(j>0)
               right=curr[j-1];
              if(i>0) 
               down=prev[j];
              curr[j]=right+down; 
           }
           prev=curr;
       }
       return prev[n-1];
    }
};
