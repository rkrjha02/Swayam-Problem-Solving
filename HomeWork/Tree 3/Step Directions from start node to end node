TreeNode *lca(TreeNode *root, int a, int b)
    {
        if(root==nullptr || root->val==a || root->val==b)
         return root;
        TreeNode *left=lca(root->left, a, b);
        TreeNode *right=lca(root->right, a, b);
        if(left==nullptr)
         return right;
        if(right==nullptr)
         return left;
        return root;  
    }
    void downwards(TreeNode *node, string &path, string &pathStart, string &pathEnd, int start, int end)
    {
       if(node==nullptr)
        return;
       if(node->val==start)
        pathStart=path;
       if(node->val==end)
        pathEnd=path; 
       path.push_back('L');
       downwards(node->left, path, pathStart, pathEnd, start, end);
       path.pop_back();
       path.push_back('R');
       downwards(node->right, path, pathStart, pathEnd, start, end);
       path.pop_back();  
    }
    string getDirections(TreeNode* root, int startValue, int destValue) 
    {
       TreeNode *ancestor=lca(root, startValue, destValue);
       string route;
       string routeStart;
       string routeDest;
       downwards(ancestor, route, routeStart, routeDest, startValue, destValue);
       for(int i=0;i<routeStart.length();i++)
         routeStart[i]='U';
       return routeStart+ routeDest; 
    }
